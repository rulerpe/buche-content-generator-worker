{
  "version": 3,
  "sources": ["../bundle-u5IjEb/strip-cf-connecting-ip-header.js", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-u5IjEb/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-u5IjEb/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/peterchen/Development/buche-project/buche-content-generator-worker/.wrangler/tmp/dev-X0MpZ1",
  "sourcesContent": ["function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "/**\n * Buche Content Generator Worker - Generates relevant erotic content based on input text and tags\n * \n * Features:\n * - Accepts text content and tags in request body\n * - Finds relevant tagged content from database\n * - Generates new content maintaining characters and context\n * - Returns generated content that builds on the input\n */\n\nexport interface Env {\n\tCONTENT_BUCKET: R2Bucket;\n\tCONTENT_DB: D1Database;\n\tAI: Ai;\n}\n\ninterface ContentGenerationRequest {\n\tcontent: string; // Input text content\n\ttags?: string[]; // Optional input tags\n\tmaxLength?: number; // Maximum length of generated content\n\tstyle?: 'continue' | 'expand' | 'variation'; // Generation style\n\tcharacterLimit?: number; // Limit for characters to maintain\n}\n\ninterface ContentGenerationResponse {\n\tsuccess: boolean;\n\tgeneratedContent?: string;\n\trelatedSnippets?: RelatedSnippet[];\n\tdetectedTags?: string[];\n\terror?: string;\n}\n\ninterface RelatedSnippet {\n\tid: string;\n\ttitle: string;\n\tauthor: string;\n\ttags: string[];\n\trelevanceScore: number;\n}\n\ninterface Tag {\n\tid: number;\n\tname: string;\n\tusageCount: number;\n}\n\ninterface Snippet {\n\tid: string;\n\ttitle: string;\n\tauthor: string;\n\tchapterIndex: number;\n\tsourceUrl: string;\n\tcreatedAt: string;\n\ttags?: string; // JSON array of tag IDs\n}\n\nconst GENERATION_PROMPT = `\u4F60\u662F\u4E00\u4E2A\u4E13\u4E1A\u7684\u60C5\u8272\u6587\u5B66\u521B\u4F5C\u52A9\u624B\u3002\u6839\u636E\u63D0\u4F9B\u7684\u5185\u5BB9\u548C\u76F8\u5173\u7247\u6BB5\uFF0C\u7EE7\u7EED\u521B\u4F5C\u7B26\u5408\u4EE5\u4E0B\u8981\u6C42\u7684\u5185\u5BB9\uFF1A\n\n**\u521B\u4F5C\u8981\u6C42\uFF1A**\n1. **\u4FDD\u6301\u89D2\u8272\u4E00\u81F4\u6027** - \u7EF4\u6301\u539F\u6587\u4E2D\u7684\u4EBA\u7269\u7279\u5F81\u3001\u6027\u683C\u548C\u5173\u7CFB\n2. **\u5EF6\u7EED\u60C5\u8282\u53D1\u5C55** - \u81EA\u7136\u5730\u5EF6\u7EED\u539F\u6587\u7684\u6545\u4E8B\u60C5\u8282\u548C\u60C5\u611F\u53D1\u5C55\n3. **\u5339\u914D\u5199\u4F5C\u98CE\u683C** - \u4FDD\u6301\u4E0E\u539F\u6587\u76F8\u4F3C\u7684\u53D9\u8FF0\u98CE\u683C\u3001\u8BED\u8A00\u7279\u70B9\u548C\u6587\u5B57\u98CE\u683C\n4. **\u6DF1\u5316\u60C5\u611F\u63CF\u8FF0** - \u52A0\u5F3A\u60C5\u611F\u5C42\u9762\u7684\u63CF\u5199\uFF0C\u5305\u62EC\u5FC3\u7406\u6D3B\u52A8\u548C\u611F\u53D7\n5. **\u9002\u5EA6\u7684\u8EAB\u4F53\u63CF\u5199** - \u5305\u542B\u6070\u5F53\u7684\u8EAB\u4F53\u63A5\u89E6\u548C\u611F\u5B98\u63CF\u8FF0\n\n**\u53C2\u8003\u5185\u5BB9\u5206\u6790\uFF1A**\n- \u4ECE\u76F8\u5173\u7247\u6BB5\u4E2D\u63D0\u53D6\u9002\u5408\u7684\u60C5\u8282\u5143\u7D20\u3001\u573A\u666F\u8BBE\u7F6E\u548C\u4E92\u52A8\u65B9\u5F0F\n- \u5B66\u4E60\u76F8\u5173\u5185\u5BB9\u7684\u53D9\u8FF0\u6280\u5DE7\u548C\u60C5\u611F\u8868\u8FBE\u65B9\u5F0F\n- \u4FDD\u6301\u4E0E\u53C2\u8003\u5185\u5BB9\u7C7B\u4F3C\u7684\u6FC0\u60C5\u7A0B\u5EA6\u548C\u8868\u8FBE\u98CE\u683C\n\n**\u8F93\u51FA\u8981\u6C42\uFF1A**\n- \u957F\u5EA6\uFF1A300-800\u5B57\n- \u8BED\u8A00\uFF1A\u6D41\u7545\u7684\u4E2D\u6587\n- \u7ED3\u6784\uFF1A\u5B8C\u6574\u7684\u6BB5\u843D\uFF0C\u6709\u6E05\u6670\u7684\u60C5\u8282\u53D1\u5C55\n- \u5185\u5BB9\uFF1A\u5EF6\u7EED\u6027\u5F3A\uFF0C\u4E0E\u539F\u6587\u65E0\u7F1D\u8854\u63A5\n\n**\u539F\u59CB\u5185\u5BB9\uFF1A**\n{original_content}\n\n**\u76F8\u5173\u53C2\u8003\u7247\u6BB5\uFF1A**\n{related_snippets}\n\n**\u68C0\u6D4B\u5230\u7684\u6807\u7B7E\uFF1A**\n{detected_tags}\n\n\u8BF7\u57FA\u4E8E\u4EE5\u4E0A\u4FE1\u606F\u521B\u4F5C\u540E\u7EED\u5185\u5BB9\uFF1A`;\n\nexport default {\n\tasync fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n\t\tconst url = new URL(request.url);\n\t\t\n\t\tif (url.pathname === '/generate') {\n\t\t\treturn handleContentGeneration(request, env);\n\t\t}\n\t\t\n\t\tif (url.pathname === '/status') {\n\t\t\treturn handleStatus(env);\n\t\t}\n\t\t\n\t\treturn new Response('Buche Content Generator Worker\\n\\nEndpoints:\\n- POST /generate - Generate content based on input\\n- GET /status - Check worker status');\n\t},\n} satisfies ExportedHandler<Env>;\n\nasync function handleContentGeneration(request: Request, env: Env): Promise<Response> {\n\tif (request.method !== 'POST') {\n\t\treturn new Response('Method not allowed', { status: 405 });\n\t}\n\t\n\ttry {\n\t\tconst body = await request.json() as ContentGenerationRequest;\n\t\t\n\t\tif (!body.content || body.content.trim().length === 0) {\n\t\t\treturn new Response(JSON.stringify({\n\t\t\t\tsuccess: false,\n\t\t\t\terror: 'Content is required in request body'\n\t\t\t}), {\n\t\t\t\tstatus: 400,\n\t\t\t\theaders: { 'Content-Type': 'application/json' }\n\t\t\t});\n\t\t}\n\t\t\n\t\t// Analyze input content to detect relevant tags\n\t\tconst detectedTags = await analyzeContentForTags(body.content, env.AI);\n\t\t\n\t\t// Combine detected tags with provided tags\n\t\tconst allTags = [...(body.tags || []), ...detectedTags];\n\t\tconst uniqueTags = [...new Set(allTags)];\n\t\t\n\t\t// Find related snippets based on tags\n\t\tconst relatedSnippets = await findRelatedSnippets(uniqueTags, env, 5);\n\t\t\n\t\t// Generate new content\n\t\tconst generatedContent = await generateContent(\n\t\t\tbody.content,\n\t\t\trelatedSnippets,\n\t\t\tuniqueTags,\n\t\t\tenv.AI,\n\t\t\tbody.maxLength || 800\n\t\t);\n\t\t\n\t\tconst response: ContentGenerationResponse = {\n\t\t\tsuccess: true,\n\t\t\tgeneratedContent,\n\t\t\trelatedSnippets: relatedSnippets.map(snippet => ({\n\t\t\t\tid: snippet.id,\n\t\t\t\ttitle: snippet.title,\n\t\t\t\tauthor: snippet.author,\n\t\t\t\ttags: snippet.tagNames || [],\n\t\t\t\trelevanceScore: snippet.relevanceScore || 0\n\t\t\t})),\n\t\t\tdetectedTags\n\t\t};\n\t\t\n\t\treturn new Response(JSON.stringify(response), {\n\t\t\theaders: { 'Content-Type': 'application/json' }\n\t\t});\n\t\t\n\t} catch (error) {\n\t\tconsole.error('Content generation error:', error);\n\t\treturn new Response(JSON.stringify({\n\t\t\tsuccess: false,\n\t\t\terror: error instanceof Error ? error.message : String(error)\n\t\t}), {\n\t\t\tstatus: 500,\n\t\t\theaders: { 'Content-Type': 'application/json' }\n\t\t});\n\t}\n}\n\nasync function handleStatus(env: Env): Promise<Response> {\n\ttry {\n\t\tconst [snippetsResult, tagsResult] = await Promise.all([\n\t\t\tenv.CONTENT_DB.prepare('SELECT COUNT(*) as count FROM snippets WHERE tags IS NOT NULL AND tags != \"[]\"').first(),\n\t\t\tenv.CONTENT_DB.prepare('SELECT COUNT(*) as count FROM tags').first()\n\t\t]);\n\t\t\n\t\tconst taggedSnippets = (snippetsResult?.count as number) || 0;\n\t\tconst totalTags = (tagsResult?.count as number) || 0;\n\t\t\n\t\treturn new Response(JSON.stringify({\n\t\t\tstatus: 'active',\n\t\t\ttaggedSnippets,\n\t\t\ttotalTags,\n\t\t\tcapabilities: ['content_generation', 'tag_analysis', 'snippet_matching']\n\t\t}), {\n\t\t\theaders: { 'Content-Type': 'application/json' }\n\t\t});\n\t} catch (error) {\n\t\treturn new Response(JSON.stringify({\n\t\t\terror: 'Database not initialized',\n\t\t\tstatus: 'inactive'\n\t\t}), {\n\t\t\tstatus: 500,\n\t\t\theaders: { 'Content-Type': 'application/json' }\n\t\t});\n\t}\n}\n\nasync function analyzeContentForTags(content: string, ai: Ai): Promise<string[]> {\n\ttry {\n\t\tconst truncatedContent = content.length > 1500 ? content.substring(0, 1500) + '...' : content;\n\t\t\n\t\tconst prompt = `\u5206\u6790\u8FD9\u6BB5\u5185\u5BB9\uFF0C\u63D0\u53D63-6\u4E2A\u6700\u76F8\u5173\u7684\u4E2D\u6587\u6807\u7B7E\uFF08\u6BCF\u4E2A2-4\u4E2A\u5B57\uFF09\uFF0C\u7528\u4E8E\u63CF\u8FF0\u5185\u5BB9\u7684\u4E3B\u9898\u3001\u573A\u666F\u3001\u60C5\u611F\u548C\u98CE\u683C\u7279\u70B9\u3002\n\n\u5185\u5BB9\uFF1A${truncatedContent}\n\n\u53EA\u8FD4\u56DE\u6807\u7B7E\u540D\u79F0\uFF0C\u6BCF\u884C\u4E00\u4E2A\uFF0C\u4E0D\u9700\u8981\u89E3\u91CA\u3002`;\n\t\t\n\t\tconst response = await ai.run('@cf/meta/llama-4-scout-17b-16e-instruct', {\n\t\t\tmessages: [\n\t\t\t\t{\n\t\t\t\t\trole: 'user',\n\t\t\t\t\tcontent: prompt\n\t\t\t\t}\n\t\t\t],\n\t\t\tmax_tokens: 100\n\t\t}) as any;\n\t\t\n\t\tconst result = response.response as string;\n\t\t\n\t\t// Parse the response to extract tag names\n\t\tconst rawTags = result\n\t\t\t.split('\\n')\n\t\t\t.map(line => line.trim())\n\t\t\t.filter(line => line.length > 0 && !line.includes(':'))\n\t\t\t.slice(0, 6);\n\t\t\n\t\t// Clean and filter tags\n\t\tconst cleanedTags = rawTags\n\t\t\t.map(tag => cleanTag(tag))\n\t\t\t.filter(tag => tag.length > 0 && tag.length <= 4)\n\t\t\t.filter(tag => isValidChineseTag(tag));\n\t\t\n\t\treturn cleanedTags;\n\t} catch (error) {\n\t\tconsole.error('Error analyzing content for tags:', error);\n\t\treturn [];\n\t}\n}\n\nfunction cleanTag(tag: string): string {\n\treturn tag\n\t\t.replace(/[\\s\\u00A0\\u3000]/g, '') // Remove all types of spaces\n\t\t.replace(/[^\\u4e00-\\u9fff\\u3400-\\u4dbf\\u20000-\\u2a6df\\u2a700-\\u2b73f\\u2b740-\\u2b81f\\u2b820-\\u2ceaf\\u2ceb0-\\u2ebef\\u30000-\\u3134f\\u4e00-\\u9fff\\u3400-\\u4dbf0-9]/g, '') // Keep only Chinese characters and numbers\n\t\t.trim();\n}\n\nfunction isValidChineseTag(tag: string): boolean {\n\tconst chineseRegex = /[\\u4e00-\\u9fff\\u3400-\\u4dbf\\u20000-\\u2a6df\\u2a700-\\u2b73f\\u2b740-\\u2b81f\\u2b820-\\u2ceaf\\u2ceb0-\\u2ebef\\u30000-\\u3134f]/;\n\treturn tag.length > 0 && tag.length <= 4 && chineseRegex.test(tag);\n}\n\ninterface RelatedSnippetWithContent extends RelatedSnippet {\n\tcontent?: string;\n\ttagNames?: string[];\n}\n\nasync function findRelatedSnippets(tags: string[], env: Env, limit: number = 5): Promise<RelatedSnippetWithContent[]> {\n\tif (tags.length === 0) {\n\t\treturn [];\n\t}\n\t\n\ttry {\n\t\t// First, find tag IDs for the given tag names\n\t\tconst tagPlaceholders = tags.map(() => '?').join(',');\n\t\tconst tagQuery = `SELECT id, name FROM tags WHERE name IN (${tagPlaceholders})`;\n\t\tconst tagResults = await env.CONTENT_DB.prepare(tagQuery).bind(...tags).all();\n\t\t\n\t\tconst foundTags = tagResults.results as unknown as Tag[];\n\t\tif (foundTags.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\t\n\t\tconst tagIds = foundTags.map(tag => tag.id);\n\t\tconst tagIdPlaceholders = tagIds.map(() => '?').join(',');\n\t\t\n\t\t// Find snippets that have any of these tags\n\t\tconst snippetQuery = `\n\t\t\tSELECT s.*, \n\t\t\t\t   COUNT(st.tag_id) as tag_matches,\n\t\t\t\t   GROUP_CONCAT(t.name) as tag_names\n\t\t\tFROM snippets s\n\t\t\tJOIN snippet_tags st ON s.id = st.snippet_id\n\t\t\tJOIN tags t ON st.tag_id = t.id\n\t\t\tWHERE st.tag_id IN (${tagIdPlaceholders})\n\t\t\tGROUP BY s.id\n\t\t\tORDER BY tag_matches DESC, t.usage_count DESC\n\t\t\tLIMIT ?\n\t\t`;\n\t\t\n\t\tconst snippetResults = await env.CONTENT_DB.prepare(snippetQuery)\n\t\t\t.bind(...tagIds, limit)\n\t\t\t.all();\n\t\t\n\t\tconst relatedSnippets: RelatedSnippetWithContent[] = [];\n\t\t\n\t\tfor (const snippet of snippetResults.results as any[]) {\n\t\t\ttry {\n\t\t\t\t// Get content from R2\n\t\t\t\tconst r2Object = await env.CONTENT_BUCKET.get(snippet.id);\n\t\t\t\tif (r2Object) {\n\t\t\t\t\tconst content = await r2Object.text();\n\t\t\t\t\t\n\t\t\t\t\t// Calculate relevance score based on tag matches\n\t\t\t\t\tconst tagMatches = snippet.tag_matches || 0;\n\t\t\t\t\tconst relevanceScore = Math.min(tagMatches / tags.length, 1.0);\n\t\t\t\t\t\n\t\t\t\t\trelatedSnippets.push({\n\t\t\t\t\t\tid: snippet.id,\n\t\t\t\t\t\ttitle: snippet.title,\n\t\t\t\t\t\tauthor: snippet.author,\n\t\t\t\t\t\ttags: snippet.tag_names ? snippet.tag_names.split(',') : [],\n\t\t\t\t\t\tcontent: content,\n\t\t\t\t\t\ttagNames: snippet.tag_names ? snippet.tag_names.split(',') : [],\n\t\t\t\t\t\trelevanceScore: relevanceScore\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Error fetching content for snippet ${snippet.id}:`, error);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn relatedSnippets;\n\t} catch (error) {\n\t\tconsole.error('Error finding related snippets:', error);\n\t\treturn [];\n\t}\n}\n\nasync function generateContent(\n\toriginalContent: string,\n\trelatedSnippets: RelatedSnippetWithContent[],\n\tdetectedTags: string[],\n\tai: Ai,\n\tmaxLength: number = 800\n): Promise<string> {\n\ttry {\n\t\t// Prepare related snippets text (limit to avoid token overflow)\n\t\tconst snippetsText = relatedSnippets\n\t\t\t.slice(0, 3) // Use top 3 most relevant snippets\n\t\t\t.map((snippet, index) => {\n\t\t\t\tconst content = snippet.content && snippet.content.length > 300 \n\t\t\t\t\t? snippet.content.substring(0, 300) + '...' \n\t\t\t\t\t: snippet.content;\n\t\t\t\treturn `[\u7247\u6BB5${index + 1}] \u300A${snippet.title}\u300B\u4F5C\u8005\uFF1A${snippet.author}\\n${content}`;\n\t\t\t})\n\t\t\t.join('\\n\\n');\n\t\t\n\t\tconst tagsText = detectedTags.join('\u3001');\n\t\t\n\t\tconst prompt = GENERATION_PROMPT\n\t\t\t.replace('{original_content}', originalContent)\n\t\t\t.replace('{related_snippets}', snippetsText || '(\u65E0\u76F8\u5173\u7247\u6BB5)')\n\t\t\t.replace('{detected_tags}', tagsText || '(\u65E0\u68C0\u6D4B\u5230\u7684\u6807\u7B7E)');\n\t\t\n\t\tconst response = await ai.run('@cf/meta/llama-4-scout-17b-16e-instruct', {\n\t\t\tmessages: [\n\t\t\t\t{\n\t\t\t\t\trole: 'user',\n\t\t\t\t\tcontent: prompt\n\t\t\t\t}\n\t\t\t],\n\t\t\tmax_tokens: Math.min(maxLength * 2, 1500) // Allow some buffer for Chinese tokens\n\t\t}) as any;\n\t\t\n\t\tconst generatedText = response.response as string;\n\t\t\n\t\t// Clean up the generated content\n\t\tconst cleanedContent = generatedText\n\t\t\t.trim()\n\t\t\t.replace(/^[\\\"'\"\"\"'']+|[\\\"'\"\"\"'']+$/g, '') // Remove surrounding quotes\n\t\t\t.replace(/\\n{3,}/g, '\\n\\n') // Limit consecutive newlines\n\t\t\t.substring(0, maxLength); // Ensure length limit\n\t\t\n\t\treturn cleanedContent;\n\t\t\n\t} catch (error) {\n\t\tconsole.error('Error generating content:', error);\n\t\tthrow new Error('Failed to generate content');\n\t}\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/peterchen/Development/buche-project/buche-content-generator-worker/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/peterchen/Development/buche-project/buche-content-generator-worker/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/peterchen/Development/buche-project/buche-content-generator-worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/peterchen/Development/buche-project/buche-content-generator-worker/src/index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/peterchen/Development/buche-project/buche-content-generator-worker/.wrangler/tmp/bundle-u5IjEb/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/peterchen/Development/buche-project/buche-content-generator-worker/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/peterchen/Development/buche-project/buche-content-generator-worker/.wrangler/tmp/bundle-u5IjEb/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/peterchen/Development/buche-project/buche-content-generator-worker/.wrangler/tmp/bundle-u5IjEb/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": ";;;;AAAA,SAAS,0BAA0B,OAAO,MAAM;AAC/C,QAAM,UAAU,IAAI,QAAQ,OAAO,IAAI;AACvC,UAAQ,QAAQ,OAAO,kBAAkB;AACzC,SAAO;AACR;AAJS;AAMT,WAAW,QAAQ,IAAI,MAAM,WAAW,OAAO;AAAA,EAC9C,MAAM,QAAQ,SAAS,UAAU;AAChC,WAAO,QAAQ,MAAM,QAAQ,SAAS;AAAA,MACrC,0BAA0B,MAAM,MAAM,QAAQ;AAAA,IAC/C,CAAC;AAAA,EACF;AACD,CAAC;;;AC4CD,IAAM,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+B1B,IAAO,cAAQ;AAAA,EACd,MAAM,MAAM,SAAkB,KAAU,KAA0C;AACjF,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAE/B,QAAI,IAAI,aAAa,aAAa;AACjC,aAAO,wBAAwB,SAAS,GAAG;AAAA,IAC5C;AAEA,QAAI,IAAI,aAAa,WAAW;AAC/B,aAAO,aAAa,GAAG;AAAA,IACxB;AAEA,WAAO,IAAI,SAAS,uIAAuI;AAAA,EAC5J;AACD;AAEA,eAAe,wBAAwB,SAAkB,KAA6B;AACrF,MAAI,QAAQ,WAAW,QAAQ;AAC9B,WAAO,IAAI,SAAS,sBAAsB,EAAE,QAAQ,IAAI,CAAC;AAAA,EAC1D;AAEA,MAAI;AACH,UAAM,OAAO,MAAM,QAAQ,KAAK;AAEhC,QAAI,CAAC,KAAK,WAAW,KAAK,QAAQ,KAAK,EAAE,WAAW,GAAG;AACtD,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QAClC,SAAS;AAAA,QACT,OAAO;AAAA,MACR,CAAC,GAAG;AAAA,QACH,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAC/C,CAAC;AAAA,IACF;AAGA,UAAM,eAAe,MAAM,sBAAsB,KAAK,SAAS,IAAI,EAAE;AAGrE,UAAM,UAAU,CAAC,GAAI,KAAK,QAAQ,CAAC,GAAI,GAAG,YAAY;AACtD,UAAM,aAAa,CAAC,GAAG,IAAI,IAAI,OAAO,CAAC;AAGvC,UAAM,kBAAkB,MAAM,oBAAoB,YAAY,KAAK,CAAC;AAGpE,UAAM,mBAAmB,MAAM;AAAA,MAC9B,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA,IAAI;AAAA,MACJ,KAAK,aAAa;AAAA,IACnB;AAEA,UAAM,WAAsC;AAAA,MAC3C,SAAS;AAAA,MACT;AAAA,MACA,iBAAiB,gBAAgB,IAAI,cAAY;AAAA,QAChD,IAAI,QAAQ;AAAA,QACZ,OAAO,QAAQ;AAAA,QACf,QAAQ,QAAQ;AAAA,QAChB,MAAM,QAAQ,YAAY,CAAC;AAAA,QAC3B,gBAAgB,QAAQ,kBAAkB;AAAA,MAC3C,EAAE;AAAA,MACF;AAAA,IACD;AAEA,WAAO,IAAI,SAAS,KAAK,UAAU,QAAQ,GAAG;AAAA,MAC7C,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAC/C,CAAC;AAAA,EAEF,SAAS,OAAO;AACf,YAAQ,MAAM,6BAA6B,KAAK;AAChD,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MAClC,SAAS;AAAA,MACT,OAAO,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AAAA,IAC7D,CAAC,GAAG;AAAA,MACH,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAC/C,CAAC;AAAA,EACF;AACD;AAhEe;AAkEf,eAAe,aAAa,KAA6B;AACxD,MAAI;AACH,UAAM,CAAC,gBAAgB,UAAU,IAAI,MAAM,QAAQ,IAAI;AAAA,MACtD,IAAI,WAAW,QAAQ,gFAAgF,EAAE,MAAM;AAAA,MAC/G,IAAI,WAAW,QAAQ,oCAAoC,EAAE,MAAM;AAAA,IACpE,CAAC;AAED,UAAM,iBAAkB,gBAAgB,SAAoB;AAC5D,UAAM,YAAa,YAAY,SAAoB;AAEnD,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MAClC,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,MACA,cAAc,CAAC,sBAAsB,gBAAgB,kBAAkB;AAAA,IACxE,CAAC,GAAG;AAAA,MACH,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAC/C,CAAC;AAAA,EACF,SAAS,OAAO;AACf,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MAClC,OAAO;AAAA,MACP,QAAQ;AAAA,IACT,CAAC,GAAG;AAAA,MACH,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAC/C,CAAC;AAAA,EACF;AACD;AA3Be;AA6Bf,eAAe,sBAAsB,SAAiB,IAA2B;AAChF,MAAI;AACH,UAAM,mBAAmB,QAAQ,SAAS,OAAO,QAAQ,UAAU,GAAG,IAAI,IAAI,QAAQ;AAEtF,UAAM,SAAS;AAAA;AAAA,oBAEZ,gBAAgB;AAAA;AAAA;AAInB,UAAM,WAAW,MAAM,GAAG,IAAI,2CAA2C;AAAA,MACxE,UAAU;AAAA,QACT;AAAA,UACC,MAAM;AAAA,UACN,SAAS;AAAA,QACV;AAAA,MACD;AAAA,MACA,YAAY;AAAA,IACb,CAAC;AAED,UAAM,SAAS,SAAS;AAGxB,UAAM,UAAU,OACd,MAAM,IAAI,EACV,IAAI,UAAQ,KAAK,KAAK,CAAC,EACvB,OAAO,UAAQ,KAAK,SAAS,KAAK,CAAC,KAAK,SAAS,GAAG,CAAC,EACrD,MAAM,GAAG,CAAC;AAGZ,UAAM,cAAc,QAClB,IAAI,SAAO,SAAS,GAAG,CAAC,EACxB,OAAO,SAAO,IAAI,SAAS,KAAK,IAAI,UAAU,CAAC,EAC/C,OAAO,SAAO,kBAAkB,GAAG,CAAC;AAEtC,WAAO;AAAA,EACR,SAAS,OAAO;AACf,YAAQ,MAAM,qCAAqC,KAAK;AACxD,WAAO,CAAC;AAAA,EACT;AACD;AAxCe;AA0Cf,SAAS,SAAS,KAAqB;AACtC,SAAO,IACL,QAAQ,qBAAqB,EAAE,EAC/B,QAAQ,yJAAyJ,EAAE,EACnK,KAAK;AACR;AALS;AAOT,SAAS,kBAAkB,KAAsB;AAChD,QAAM,eAAe;AACrB,SAAO,IAAI,SAAS,KAAK,IAAI,UAAU,KAAK,aAAa,KAAK,GAAG;AAClE;AAHS;AAUT,eAAe,oBAAoB,MAAgB,KAAU,QAAgB,GAAyC;AACrH,MAAI,KAAK,WAAW,GAAG;AACtB,WAAO,CAAC;AAAA,EACT;AAEA,MAAI;AAEH,UAAM,kBAAkB,KAAK,IAAI,MAAM,GAAG,EAAE,KAAK,GAAG;AACpD,UAAM,WAAW,4CAA4C,eAAe;AAC5E,UAAM,aAAa,MAAM,IAAI,WAAW,QAAQ,QAAQ,EAAE,KAAK,GAAG,IAAI,EAAE,IAAI;AAE5E,UAAM,YAAY,WAAW;AAC7B,QAAI,UAAU,WAAW,GAAG;AAC3B,aAAO,CAAC;AAAA,IACT;AAEA,UAAM,SAAS,UAAU,IAAI,SAAO,IAAI,EAAE;AAC1C,UAAM,oBAAoB,OAAO,IAAI,MAAM,GAAG,EAAE,KAAK,GAAG;AAGxD,UAAM,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAOE,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAMxC,UAAM,iBAAiB,MAAM,IAAI,WAAW,QAAQ,YAAY,EAC9D,KAAK,GAAG,QAAQ,KAAK,EACrB,IAAI;AAEN,UAAM,kBAA+C,CAAC;AAEtD,eAAW,WAAW,eAAe,SAAkB;AACtD,UAAI;AAEH,cAAM,WAAW,MAAM,IAAI,eAAe,IAAI,QAAQ,EAAE;AACxD,YAAI,UAAU;AACb,gBAAM,UAAU,MAAM,SAAS,KAAK;AAGpC,gBAAM,aAAa,QAAQ,eAAe;AAC1C,gBAAM,iBAAiB,KAAK,IAAI,aAAa,KAAK,QAAQ,CAAG;AAE7D,0BAAgB,KAAK;AAAA,YACpB,IAAI,QAAQ;AAAA,YACZ,OAAO,QAAQ;AAAA,YACf,QAAQ,QAAQ;AAAA,YAChB,MAAM,QAAQ,YAAY,QAAQ,UAAU,MAAM,GAAG,IAAI,CAAC;AAAA,YAC1D;AAAA,YACA,UAAU,QAAQ,YAAY,QAAQ,UAAU,MAAM,GAAG,IAAI,CAAC;AAAA,YAC9D;AAAA,UACD,CAAC;AAAA,QACF;AAAA,MACD,SAAS,OAAO;AACf,gBAAQ,MAAM,sCAAsC,QAAQ,EAAE,KAAK,KAAK;AAAA,MACzE;AAAA,IACD;AAEA,WAAO;AAAA,EACR,SAAS,OAAO;AACf,YAAQ,MAAM,mCAAmC,KAAK;AACtD,WAAO,CAAC;AAAA,EACT;AACD;AAtEe;AAwEf,eAAe,gBACd,iBACA,iBACA,cACA,IACA,YAAoB,KACF;AAClB,MAAI;AAEH,UAAM,eAAe,gBACnB,MAAM,GAAG,CAAC,EACV,IAAI,CAAC,SAAS,UAAU;AACxB,YAAM,UAAU,QAAQ,WAAW,QAAQ,QAAQ,SAAS,MACzD,QAAQ,QAAQ,UAAU,GAAG,GAAG,IAAI,QACpC,QAAQ;AACX,aAAO,gBAAM,QAAQ,CAAC,WAAM,QAAQ,KAAK,2BAAO,QAAQ,MAAM;AAAA,EAAK,OAAO;AAAA,IAC3E,CAAC,EACA,KAAK,MAAM;AAEb,UAAM,WAAW,aAAa,KAAK,QAAG;AAEtC,UAAM,SAAS,kBACb,QAAQ,sBAAsB,eAAe,EAC7C,QAAQ,sBAAsB,gBAAgB,kCAAS,EACvD,QAAQ,mBAAmB,YAAY,8CAAW;AAEpD,UAAM,WAAW,MAAM,GAAG,IAAI,2CAA2C;AAAA,MACxE,UAAU;AAAA,QACT;AAAA,UACC,MAAM;AAAA,UACN,SAAS;AAAA,QACV;AAAA,MACD;AAAA,MACA,YAAY,KAAK,IAAI,YAAY,GAAG,IAAI;AAAA;AAAA,IACzC,CAAC;AAED,UAAM,gBAAgB,SAAS;AAG/B,UAAM,iBAAiB,cACrB,KAAK,EACL,QAAQ,8BAA8B,EAAE,EACxC,QAAQ,WAAW,MAAM,EACzB,UAAU,GAAG,SAAS;AAExB,WAAO;AAAA,EAER,SAAS,OAAO;AACf,YAAQ,MAAM,6BAA6B,KAAK;AAChD,UAAM,IAAI,MAAM,4BAA4B;AAAA,EAC7C;AACD;AAnDe;;;ACvUf,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,UAAE;AACD,QAAI;AACH,UAAI,QAAQ,SAAS,QAAQ,CAAC,QAAQ,UAAU;AAC/C,cAAM,SAAS,QAAQ,KAAK,UAAU;AACtC,eAAO,EAAE,MAAM,OAAO,KAAK,GAAG,MAAM;AAAA,QAAC;AAAA,MACtC;AAAA,IACD,SAAS,GAAG;AACX,cAAQ,MAAM,4CAA4C,CAAC;AAAA,IAC5D;AAAA,EACD;AACD,GAb8B;AAe9B,IAAO,6CAAQ;;;ACRf,SAAS,YAAY,GAAmB;AACvC,SAAO;AAAA,IACN,MAAM,GAAG;AAAA,IACT,SAAS,GAAG,WAAW,OAAO,CAAC;AAAA,IAC/B,OAAO,GAAG;AAAA,IACV,OAAO,GAAG,UAAU,SAAY,SAAY,YAAY,EAAE,KAAK;AAAA,EAChE;AACD;AAPS;AAUT,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,SAAS,GAAQ;AAChB,UAAM,QAAQ,YAAY,CAAC;AAC3B,WAAO,SAAS,KAAK,OAAO;AAAA,MAC3B,QAAQ;AAAA,MACR,SAAS,EAAE,+BAA+B,OAAO;AAAA,IAClD,CAAC;AAAA,EACF;AACD,GAV8B;AAY9B,IAAO,2CAAQ;;;ACzBJ,IAAM,mCAAmC;AAAA,EAE9B;AAAA,EAAyB;AAC3C;AACA,IAAO,sCAAQ;;;ACcnB,IAAM,wBAAsC,CAAC;AAKtC,SAAS,uBAAuB,MAAqC;AAC3E,wBAAsB,KAAK,GAAG,KAAK,KAAK,CAAC;AAC1C;AAFgB;AAShB,SAAS,uBACR,SACA,KACA,KACA,UACA,iBACsB;AACtB,QAAM,CAAC,MAAM,GAAG,IAAI,IAAI;AACxB,QAAM,gBAAmC;AAAA,IACxC;AAAA,IACA,KAAK,YAAY,QAAQ;AACxB,aAAO,uBAAuB,YAAY,QAAQ,KAAK,UAAU,IAAI;AAAA,IACtE;AAAA,EACD;AACA,SAAO,KAAK,SAAS,KAAK,KAAK,aAAa;AAC7C;AAfS;AAiBF,SAAS,kBACf,SACA,KACA,KACA,UACA,iBACsB;AACtB,SAAO,uBAAuB,SAAS,KAAK,KAAK,UAAU;AAAA,IAC1D,GAAG;AAAA,IACH;AAAA,EACD,CAAC;AACF;AAXgB;;;AC3ChB,IAAM,iCAAN,MAAM,gCAA8D;AAAA,EAGnE,YACU,eACA,MACT,SACC;AAHQ;AACA;AAGT,SAAK,WAAW;AAAA,EACjB;AAAA,EArBD,OAYoE;AAAA;AAAA;AAAA,EAC1D;AAAA,EAUT,UAAU;AACT,QAAI,EAAE,gBAAgB,kCAAiC;AACtD,YAAM,IAAI,UAAU,oBAAoB;AAAA,IACzC;AAEA,SAAK,SAAS;AAAA,EACf;AACD;AAEA,SAAS,oBAAoB,QAA0C;AAEtE,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAEA,QAAM,kBAA+C,gCACpD,SACA,KACA,KACC;AACD,QAAI,OAAO,UAAU,QAAW;AAC/B,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,WAAO,OAAO,MAAM,SAAS,KAAK,GAAG;AAAA,EACtC,GATqD;AAWrD,SAAO;AAAA,IACN,GAAG;AAAA,IACH,MAAM,SAAS,KAAK,KAAK;AACxB,YAAM,aAAyB,gCAAU,MAAM,MAAM;AACpD,YAAI,SAAS,eAAe,OAAO,cAAc,QAAW;AAC3D,gBAAM,aAAa,IAAI;AAAA,YACtB,KAAK,IAAI;AAAA,YACT,KAAK,QAAQ;AAAA,YACb,MAAM;AAAA,YAAC;AAAA,UACR;AACA,iBAAO,OAAO,UAAU,YAAY,KAAK,GAAG;AAAA,QAC7C;AAAA,MACD,GAT+B;AAU/B,aAAO,kBAAkB,SAAS,KAAK,KAAK,YAAY,eAAe;AAAA,IACxE;AAAA,EACD;AACD;AAxCS;AA0CT,SAAS,qBACR,OAC8B;AAE9B,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAGA,SAAO,cAAc,MAAM;AAAA,IAC1B,mBAAyE,wBACxE,SACA,KACA,QACI;AACJ,WAAK,MAAM;AACX,WAAK,MAAM;AACX,UAAI,MAAM,UAAU,QAAW;AAC9B,cAAM,IAAI,MAAM,sDAAsD;AAAA,MACvE;AACA,aAAO,MAAM,MAAM,OAAO;AAAA,IAC3B,GAXyE;AAAA,IAazE,cAA0B,wBAAC,MAAM,SAAS;AACzC,UAAI,SAAS,eAAe,MAAM,cAAc,QAAW;AAC1D,cAAM,aAAa,IAAI;AAAA,UACtB,KAAK,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,MAAM;AAAA,UAAC;AAAA,QACR;AACA,eAAO,MAAM,UAAU,UAAU;AAAA,MAClC;AAAA,IACD,GAT0B;AAAA,IAW1B,MAAM,SAAwD;AAC7D,aAAO;AAAA,QACN;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AACD;AAnDS;AAqDT,IAAI;AACJ,IAAI,OAAO,wCAAU,UAAU;AAC9B,kBAAgB,oBAAoB,mCAAK;AAC1C,WAAW,OAAO,wCAAU,YAAY;AACvC,kBAAgB,qBAAqB,mCAAK;AAC3C;AACA,IAAO,kCAAQ;",
  "names": []
}
